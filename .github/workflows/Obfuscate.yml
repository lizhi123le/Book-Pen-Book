name: Build Obfuscate BPB Panel

permissions:
  contents: write

on:
  push:
    branches: 
         - main
  workflow_dispatch:
  schedule:
    - cron: '0 */3 * * *'

jobs:
  build:
    if: |
      github.event_name == 'workflow_dispatch' || 
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - name: Check out the code
      uses: actions/checkout@v4

    - name: Get release version
      id: get_version
      run: echo "RELEASE_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

    - name: Check release version
      run: echo "Release version is $RELEASE_VERSION"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "latest"

    - name: Install dependencies
      run: |
        npm install
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Fetch and download latest worker.js from release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        RELEASE_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/lizhi123le/BPB-Worker-Panel/releases/latest)
        RELEASE_TAG=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
        echo "Latest Release: $RELEASE_TAG"
        DOWNLOAD_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name == "worker.js") | .browser_download_url')
        if [ -z "$DOWNLOAD_URL" ]; then
            echo "Error: Could not find worker.js in latest release"
          exit 1
        fi
        echo "Downloading from: $DOWNLOAD_URL"
        wget -O origin.js "$DOWNLOAD_URL"
        ls -l origin.js || true
        head -n 10 origin.js || true
        echo "Downloading RELEASE.md from repo"
        wget -O RELEASE.md "https://raw.githubusercontent.com/bia-pain-bache/BPB-Worker-Panel/refs/heads/main/RELEASE.md" || true
        ls -l RELEASE.md || true
        head -n 10 RELEASE.md || true

    - name: Build project
      run: npm run build

    - name: Show dist contents (debug)
      run: |
        echo "Working directory: $(pwd)"
        echo "Listing repository root:"
        ls -la
        echo "Dist directory listing (if exists):"
        ls -la dist || true
        echo "Top of dist files (if any):"
        for f in dist/*; do
          if [ -f "$f" ]; then
            echo "---- $f ----"
            head -n 5 "$f" || true
          fi
        done

    - name: Read release note and copy built files
      id: read_release
      shell: bash
      run: |
        set -euo pipefail

        # Ensure RELEASE.md exists
        if [ ! -f RELEASE.md ]; then
          echo "Warning: RELEASE.md not found in repo root. Proceeding without release notes."
          echo "RELEASE_BODY=" >> "$GITHUB_OUTPUT"
        else
          r=$(cat RELEASE.md)
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"
          echo "RELEASE_BODY=$r" >> "$GITHUB_OUTPUT"
        fi

        # Ensure dist exists
        if [ ! -d dist ]; then
          echo "Error: dist directory not found. Build may have failed."
          echo "Listing workspace:"
          ls -la
          exit 1
        fi

        # Create output directory and copy files
        mkdir -p output
        if [ -f dist/_worker.js ]; then
          cp -v dist/_worker.js _worker.js || { echo "Failed to copy dist/_worker.js"; ls -la dist; exit 1; }
        else
          echo "Warning: dist/_worker.js not found. Skipping copy to _worker.js."
        fi
        if [ -f RELEASE.md ]; then
          cp -v RELEASE.md output/RELEASE.md
        else
          echo "Warning: RELEASE.md not found. Skipping copy to RELEASE.md."
        fi
        if [ -f origin.js ]; then
          cp -v origin.js output/origin.js
        else
          echo "Warning: origin.js not found. Skipping copy to origin.js."
        fi

        # Copy all files from dist to output
        cp -v dist/* output/ || { echo "Failed to copy dist/* to output/"; ls -la dist; exit 1; }

        echo "After copy, output listing:"
        ls -la output
        if [ -f _worker.js ]; then
          echo "Top of _worker.js:"
          head -n 20 _worker.js || true
        fi

    - name: Commit and push built files back to repo
      if: always()
      env:
        GIT_AUTHOR_NAME: "github-actions[bot]"
        GIT_AUTHOR_EMAIL: "github-actions[bot]@users.noreply.github.com"
      run: |
        set -euo pipefail
        # Ensure we have the checkout and credentials
        git status --porcelain --untracked-files=all || true

        # Add the files you want to persist back to the repo.
        # Here: copy output/* into a folder in the repo (e.g. artifacts/) before committing,
        # or commit output/* in-place. If you prefer to keep build artifacts in output/, commit them there.
        # We'll stage output/* and also _worker.js if present.
        git add -A output || true
        if [ -f _worker.js ]; then
          git add _worker.js || true
        fi
        if [ -f origin.js ]; then
          git add origin.js || true
        fi
        if [ -f RELEASE.md ]; then
          git add RELEASE.md || true
        fi
        

        # Show staged changes
        echo "Staged changes:"
        git --no-pager diff --cached --name-status || true

        # Only commit if there are staged changes
        if git diff --cached --quiet; then
          echo "No changes to commit."
        else
          git -c user.name="$GIT_AUTHOR_NAME" -c user.email="$GIT_AUTHOR_EMAIL" commit -m "chore(ci): add build artifacts from workflow"
          # Push back to the same branch (main). persist-credentials: true ensures GITHUB_TOKEN is used.
          git push origin HEAD:main
        fi

    - name: Upload Release Assets
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: dist/*
        tag: v${{ env.RELEASE_VERSION }}
        release_name: Release v${{ env.RELEASE_VERSION }}
        overwrite: true
        file_glob: true
        prerelease: false
        body: ${{ steps.read_release.outputs.RELEASE_BODY }}
