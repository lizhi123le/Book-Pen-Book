name: Build Obfuscate BPB Panel

permissions:
  contents: write

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 */3 * * *'

jobs:
  build:
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: |
          npm install
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Get local release version
        id: get_local_version
        run: echo "RELEASE_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Fetch latest upstream release and worker.js
        id: fetch_upstream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPSTREAM_OWNER: lizhi123le                   # <-- 替换为实际 upstream owner/org
          UPSTREAM_REPO: BPB-Worker-Panel              # <-- 替换为实际 upstream repo
        run: |
          set -euo pipefail

          # 查询 upstream 的 latest release 信息并下载 worker.js（如果存在）
          echo "Querying latest release for $UPSTREAM_OWNER/$UPSTREAM_REPO"
          RELEASE_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/lizhi123le/BPB-Worker-Panel/releases/tags/v3.4.10")

          RELEASE_TAG=$(echo "$RELEASE_INFO" | jq -r '.tag_name // empty')
          echo "upstream_release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

          DOWNLOAD_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name=="worker.js") | .browser_download_url' || true)
          if [ -n "$DOWNLOAD_URL" ]; then
            echo "Found worker.js at $DOWNLOAD_URL, downloading..."
            wget -q -O origin.js "$DOWNLOAD_URL"
            echo "Downloaded origin.js size:" && ls -l origin.js || true
          else
            echo "No worker.js asset found in latest upstream release."
          fi

      - name: Build
        run: npm run build

      - name: Prepare release notes and collect artifacts
        id: prepare_artifacts
        run: |
          set -euo pipefail

          # Read RELEASE.md into output variable (URL-encode newlines)
          if [ -f RELEASE.md ]; then
            # encode percent and newlines so it is safe to pass as a single-line output
            body=$(sed -e ':a' -e 'N' -e '$!ba' -e 's/%/%25/g' -e 's/\n/%0A/g' RELEASE.md)
            echo "RELEASE_BODY=$body" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_BODY=" >> $GITHUB_OUTPUT
          fi

          # Ensure dist exists
          if [ ! -d dist ]; then
            echo "Error: dist directory not found. Build may have failed."
            ls -la
            exit 1
          fi

          # Prepare output dir and copy artifacts
          mkdir -p output
          # Use a safe copy pattern that won't fail the workflow command processing
          # and avoid creating outputs with names that include newlines or other invalid chars.
          shopt -s nullglob
          copied_files=()
          for f in dist/*; do
            cp -a "$f" output/ || { echo "Failed to copy $f"; ls -la dist; exit 1; }
            copied_files+=("$(basename "$f")")
          done
          shopt -u nullglob

          # copy optional files if present
          [ -f origin.js ] && cp origin.js output/ || true
          [ -f RELEASE.md ] && cp RELEASE.md output/ || true
          # If dist/_worker.js exists, copy it into repository root as _worker.js (but avoid adding invalid output lines)
          if [ -f dist/_worker.js ]; then
            cp dist/_worker.js _worker.js || true
          fi

          # Build a safe, newline-separated list for output (no trailing newlines that could confuse workflow commands)
          if [ -d output ]; then
            files_list=$(ls -1 output | sed -e ':a' -e 'N' -e '$!ba' -e 's/%/%25/g' -e 's/\n/%0A/g')
            echo "output_list=$files_list" >> $GITHUB_OUTPUT
          else
            echo "output_list=" >> $GITHUB_OUTPUT
          fi

      - name: Upload Release Assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: output/*            # 上传 output 下的产物（以及 dist 下复制过来的文件）
          tag: v${{ env.RELEASE_VERSION }}
          release_name: Release v${{ env.RELEASE_VERSION }}
          overwrite: true
          file_glob: true
          prerelease: false
          body: ${{ steps.prepare_artifacts.outputs.RELEASE_BODY }}
